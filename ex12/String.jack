// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array string;
    field int length;
    field int maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let string = Array.new(maxLength); 
        }
        let maxLen = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0) {
            do string.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }
    

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let string[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(length = 0)) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int counter, value, digit;
        var bool flag;
        let flag = false;
        let counter = 0;
        let value = 0;
        let digit = 0;
        if (string[0] = 45) {
            let counter = 1;
            let flag = true;
        }
        while (counter < length) {
            let digit = string[counter] - 48;
            let value = value * 10 + digit;
            let counter = counter + 1;
        }
        if (flag) {
            let value = -value;
        }
        return value;
    }


    /** computes the remaining of division between the num and the divider */
    function int modulo (int num, int divider) {
        var int resault;
        let resault = num / divider;
        return (num - (resault * divider));
    }


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var char digit, tmp;
        var int index, newLen;
        let index = 0;
        let length = 0;
        if (val < 0) {
            let val = Math.abs(val);
            let string[length] = 45;
            let length = length + 1;
            let index = index + 1;
        }
        while(val > 0) {
            let digit = 48 + String.modulo(val, 10);
            let val = val / 10;
            let string[length] = digit;
            let length = length + 1;
        }
        let newLen = length - 1;
        while (newLen > index) {
            let tmp = string[index];
            let string[index] = string[newLen];
            let string[newLen] = tmp;
            let index = index + 1;
            let newLen = newLen - 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
