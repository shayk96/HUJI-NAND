// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
 class Memory {

    static Array ram;
    static Array heap;
    static int freeList;
    static int lastElem;

    /** Initializes the class. */
    function void init() {
        let ram = 0;                     // peak and poke util
        let heap = 2048;                 // base
        let freeList = heap;
        let lastElem = freeList;
        let heap[0] = 14336;             // heap length
        let heap[1] = 0;              // next
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) { 
        var int block, next;
        let next = freeList;
        while (~(next = 0)) {
            if (ram[next] > (size + 2)) {
                let block = next + (ram[next] - (size + 1)) + 1;
                let ram[next] = ram[next] - (size + 1);
                let ram[block - 1] = size + 1;
                return block;
            }
            let next = ram[next + 1];
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
     function void deAlloc(Array o) {
         if (~(o > 0)) {
            return;
         }
        let ram[lastElem + 1]= o - 1;
        let lastElem = o - 1;
        let o[0] = 0;
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     * Assume inputs are initialized and contain at least one element. */
	function int max(Array o) {
        var int max, limit, counter;
        let counter = 0;
        let limit = ram[o - 1] - 1;
        let max = o[counter];
        while (counter < limit) {
            if (o[counter] > max){
                let max = o[counter];
            }
            let counter = counter + 1;
        }
        return max;
    }
}
