// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bits;
    static int div_calc;

    /** Initializes the library. */
    function void init() {
        var int index;
        let index = 1;
        let bits = Array.new(15);
        let bits[0] = 1;
        while (~(index > 14)) {
          let bits[index] = ^bits[index - 1];
          let index = index + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0)
        {
            return -x;
        }
        return x;
    }

    /** returns the j'th bit of the binary represantation of x*/
    function bool bit (int x, int j) {
        var int ans;
        let ans = x & bits[j];
        return ans;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, counterY, absX, absY;
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let shiftedX = absX;
        let sum = 0;
        let counterY = 0;
        while (counterY < 15) {
            if(Math.bit(absY,counterY) > 0) {
              let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let counterY = counterY + 1;
        }
        if (((x > 0) & (y < 0)) | ((x < 0) & (y > 0))) {
          let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absX, absY, ans;
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let ans = Math.div_helper(absX, absY);
        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
          let ans = -ans;
        }
        return ans;
    }

    /** a recursive function that divides the number x by y*/
    function int div_helper(int x,int y){
      var int q;
      if ((y > x) | (y < 0)) {
        let div_calc = 0;
        return 0;
      }
      let q = Math.divide(x, y + y);
      if (x - div_calc < y) {
        return  q + q;
      } else {
        let div_calc = div_calc + y;
        return q + q + 1;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, sqrtCalc;
        let y = 0;
        let j = 7;
        while (j > -1) {
          let sqrtCalc = (y + bits[j]) * (y + bits[j]);
          if (~(sqrtCalc > x) & ~(sqrtCalc < 0)){
            let y = y + bits[j];
          }
          let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      return b;
    }
}
