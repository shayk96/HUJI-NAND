// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:

     Mux16(a=y, b=x, sel=instruction[4], out=xory);
     ShiftLeft(in=xory ,out=slout);
     ShiftRight(in=xory ,out=srout);
     Mux16(a=srout, b=slout, sel=instruction[5], out=finalxory);

     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=aluout, zr=aluzr, ng=alung);

     Mux16(a=finalxory, b=aluout, sel=instruction[8], out[15]=ngsel , out[0..7]=finalout1, out[8..15]=finalout2, out=out);

     Or8Way(in=finalout1, out=tmp1);
     Or8Way(in=finalout2, out=tmp2);
     Or(a=tmp1, b=tmp2, out=tmpzr);
     Not(in=tmpzr, out=zr);

     Mux(a=false, b=true, sel=ngsel, out=ng);
 
}